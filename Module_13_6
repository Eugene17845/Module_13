from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import asyncio



api = '7269628965:AAH2Et-1chdUtKhxHctaTdXkBxEhCuYwjpo'
bot = Bot(token=api)
dp = Dispatcher(bot, storage = MemoryStorage())

kb = ReplyKeyboardMarkup()
button_calculate = KeyboardButton(text= 'Рассчитать')
button_info = KeyboardButton(text= 'Информация')
kb.add(button_calculate)
kb.add(button_info)


menu = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text='Рассчитать'), KeyboardButton(text='Информация')]],
    resize_keyboard=True)

in_kb = InlineKeyboardMarkup()
button_rkn = InlineKeyboardButton(text= 'Рассчитать норму калорий', callback_data= 'calories')
button_fc = InlineKeyboardButton(text= 'Формула расчёта', callback_data= 'formulas')
in_kb.row(button_rkn,button_fc)



@dp.message_handler(text= 'Рассчитать')
async def main_menu(message):
    await message.answer('Выберите опцию:', reply_markup= in_kb)



@dp.callback_query_handler(text= 'formulas')
async def get_formulas(call):
    await call.message.answer(
        'Формула Миффлина-Сан Жеора для мужчин: 10 х вес (кг) + 6,25 x рост (см) – 5 х возраст (г) + 5')

#Растчет калорий -----------------------------------------------------------------------
class UserState(StatesGroup):
    age = State()
    growth = State()
    weight = State()

@dp.callback_query_handler(text= 'calories')
async def set_age(call):
    print('Введите свой возраст:')
    await call.message.answer('Введите свой возраст:')
    await UserState.age.set()

@dp.message_handler(state= UserState.age)
async def set_group(message, state):
    await state.update_data(age = message.text)
    data = await state.get_data()
    print('Введите свой рост:')
    await message.answer('Введите свой рост:')
    await UserState.growth.set()

@dp.message_handler(state= UserState.growth)
async def set_weight(message, state):
    await state.update_data(growth= message.text)
    data = await state.get_data()
    print('Введите свой вес:')
    await message.answer('Введите свой вес:')
    await UserState.weight.set()

@dp.message_handler(state= UserState.weight)
async def send_calories(message, state):
    await state.update_data(weight=message.text)
    data = await state.get_data()
    cal = 10*int(data['weight']) + 6.25*int(data['growth']) - 5*int(data['age']) + 5
    await message.answer(cal)

    await state.finish()
#----------------------------------------------------------------------------------------

@dp.message_handler(commands= 'start')
async def start(message):
    print('Привет! Я бот помогающий твоему здоровью.')
    await message.answer('Привет! Я бот помогающий твоему здоровью.', reply_markup= kb)

@dp.message_handler()
async def all_massage(message):
    print('Введите команду /start, чтобы начать общение.')
    await message.answer('Введите команду /start, чтобы начать общение.')

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
